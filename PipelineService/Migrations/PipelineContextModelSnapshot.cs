// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PipelineService.Context;

namespace PipelineService.Migrations
{
    [DbContext(typeof(PipelineContext))]
    partial class PipelineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("PipelineService.Models.Pipeline.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("NodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operation")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationConfiguration")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationDescription")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("PipelineId");

                    b.ToTable("Node");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Node");
                });

            modelBuilder.Entity("PipelineService.Models.Pipeline.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pipelines");
                });

            modelBuilder.Entity("PipelineService.Models.Pipeline.NodeDoubleInput", b =>
                {
                    b.HasBaseType("PipelineService.Models.Pipeline.Node");

                    b.Property<string>("InputDatasetOneHash")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("InputDatasetOneId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputDatasetTwoHash")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("InputDatasetTwoId")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("NodeDoubleInput");
                });

            modelBuilder.Entity("PipelineService.Models.Pipeline.NodeFileInput", b =>
                {
                    b.HasBaseType("PipelineService.Models.Pipeline.Node");

                    b.Property<string>("InputObjectBucket")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputObjectKey")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("NodeFileInput");
                });

            modelBuilder.Entity("PipelineService.Models.Pipeline.NodeSingleInput", b =>
                {
                    b.HasBaseType("PipelineService.Models.Pipeline.Node");

                    b.Property<string>("InputDatasetHash")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("InputDatasetId")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("NodeSingleInput");
                });

            modelBuilder.Entity("PipelineService.Models.Pipeline.Node", b =>
                {
                    b.HasOne("PipelineService.Models.Pipeline.Node", null)
                        .WithMany("Successors")
                        .HasForeignKey("NodeId");

                    b.HasOne("PipelineService.Models.Pipeline.Pipeline", null)
                        .WithMany("Root")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PipelineService.Models.Pipeline.Node", b =>
                {
                    b.Navigation("Successors");
                });

            modelBuilder.Entity("PipelineService.Models.Pipeline.Pipeline", b =>
                {
                    b.Navigation("Root");
                });
#pragma warning restore 612, 618
        }
    }
}
