using System;
using System.ComponentModel.DataAnnotations.Schema;
using PipelineService.Helper;

namespace PipelineService.Models.Pipeline
{
	/// <summary>
	/// A <code>NodeDoubleInput</code> has two input datasets and one output dataset.
	/// The output dataset is generated by executing the operation on the two input datasets.
	/// </summary>
	/// <remarks>
	/// This might represent a join of two datasets.
	/// </remarks>
	[Table(nameof(NodeDoubleInput))]
	public record NodeDoubleInput : Node
	{
		/// <summary>
		/// The id of the input dataset.
		/// </summary>
		public Guid? InputDatasetOneId { get; set; }

		/// <summary>
		/// The producing hash of the input dataset.
		/// </summary>
		public string InputDatasetOneHash { get; set; }

		/// <summary>
		/// The id of the input dataset.
		/// </summary>
		public Guid? InputDatasetTwoId { get; set; }

		/// <summary>
		/// The producing hash of the input dataset.
		/// </summary>
		public string InputDatasetTwoHash { get; set; }

		/// <summary>
		/// The key (id) the dataset produced by this operation is stored as.
		/// </summary>
		public override string ResultKey =>
			HashHelper.ComputeHash(
				IdOrHash(InputDatasetOneId, InputDatasetOneHash),
				IdOrHash(InputDatasetTwoId, InputDatasetTwoHash),
				Operation, OperationConfiguration);

		public override string IncludeInHash => IdOrHash(InputDatasetOneId, InputDatasetOneHash) +
		                                        IdOrHash(InputDatasetTwoId, InputDatasetTwoHash);
	}
}
