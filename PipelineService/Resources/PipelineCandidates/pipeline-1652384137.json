{
  "actions": [
    {
      "operation": {
        "operationId": "0759dede-2cee-433c-b314-10a8fa456e62",
        "operationName": "applymap",
        "operationFullName": "pandas.DataFrame.applymap",
        "inputTypes": [
          2
        ],
        "outputType": 2,
        "outputTypes": [
          2
        ],
        "framework": "pandas",
        "frameworkVersion": "1.3.3",
        "sectionTitle": "Function application, GroupBy & window",
        "title": "pandas.DataFrame.applymap",
        "description": "Apply a function to a Dataframe elementwise.",
        "signature": "DataFrame.applymap(func, na_action=None)",
        "signatureName": "applymap",
        "returnsDescription": "Transformed DataFrame.",
        "sourceUrl": "https://github.com/pandas-dev/pandas/blob/v1.3.3/pandas/core/frame.py#L8743-L8826",
        "defaultConfig": {
          "func": "",
          "na_action": "None"
        },
        "returns": "DataFrame"
      },
      "input_datasets": [
        {
          'type': 2,
          "id": "9d001940-ee78-4081-a712-93dde93790db"
        }
      ]
    },
    {
      "operation": {
        "operationId": "24f097f7-08db-4e78-a7dd-b510bfa4852e",
        "operationName": "classifier_naive_bayes_gaussian",
        "operationFullName": "sklearn.classifiers.naive.bayes.gaussian",
        "inputTypes": [
          2,
          1
        ],
        "outputType": 5,
        "outputTypes": [
          5
        ],
        "framework": "scikit-learn",
        "frameworkVersion": "1.0.2",
        "sectionTitle": "SciKit Learn",
        "title": "sklearn.classifiers.naive.bayes.gaussian",
        "description": "Creates and fits a Gaussian Naive Bayes Classification model",
        "signature": null,
        "signatureName": null,
        "returnsDescription": null,
        "sourceUrl": null,
        "defaultConfig": {
          "priors": null,
          "var_smoothing": "1e-9"
        },
        "returns": "GaussianNB"
      },
      "input_datasets": [
        {
          'type': 2,
          "id": "c49b65bd-cc48-4278-a6db-f0dcdb1f3371"
        },
        {
          'type': 1,
          "id": "20040a23-95df-4906-8933-e5ab98fa1cc8"
        }
      ]
    },
    {
      "operation": {
        "operationId": "0759dede-2cee-433c-b314-10a8fa456e62",
        "operationName": "convert_dtypes",
        "operationFullName": "pandas.DataFrame.convert_dtypes",
        "inputTypes": [
          2
        ],
        "outputType": 2,
        "outputTypes": [
          2
        ],
        "framework": "pandas",
        "frameworkVersion": "1.3.3",
        "sectionTitle": "Conversion",
        "title": "pandas.DataFrame.convert_dtypes",
        "description": "Convert columns to best possible dtypes using dtypes supporting pd.NA.",
        "signature": "DataFrame.convert_dtypes(infer_objects=True, convert_string=True, convert_integer=True, convert_boolean=True, convert_floating=True)",
        "signatureName": "convert_dtypes",
        "returnsDescription": "Copy of input object with new dtype.",
        "sourceUrl": "https://github.com/pandas-dev/pandas/blob/v1.3.3/pandas/core/generic.py#L6033-L6190",
        "defaultConfig": {
          "infer_objects": "True",
          "convert_string": "True",
          "convert_integer": "True",
          "convert_boolean": "True",
          "convert_floating": "True"
        },
        "returns": "Series or DataFrame"
      },
      "input_datasets": [
        {
          'type': 2,
          "id": "c49b65bd-cc48-4278-a6db-f0dcdb1f3371"
        }
      ]
    },
    {
      "operation": {
        "operationId": "d2701fa4-b038-4fcb-b981-49f9f123da01",
        "operationName": "select_rows",
        "operationFullName": "OpIdPdSingleSelectRows",
        "inputTypes": [
          2
        ],
        "outputType": 2,
        "outputTypes": [
          2
        ],
        "framework": "pandas",
        "frameworkVersion": "1.3.3",
        "sectionTitle": "Custom Operations",
        "title": "OpIdPdSingleSelectRows",
        "description": null,
        "signature": null,
        "signatureName": null,
        "returnsDescription": null,
        "sourceUrl": null,
        "defaultConfig": {
          "column_name": null,
          "select_value": null
        },
        "returns": "DataFrame"
      },
      "input_datasets": [
        {
          'type': 2,
          "id": "847404b5-03b2-412c-8a17-8c40b788564a"
        }
      ]
    },
    {
      "operation": {
        "operationId": "0759dede-2cee-433c-b314-10a8fa456e62",
        "operationName": "compare",
        "operationFullName": "pandas.DataFrame.compare",
        "inputTypes": [
          2,
          2
        ],
        "outputType": 2,
        "outputTypes": [
          2
        ],
        "framework": "pandas",
        "frameworkVersion": "1.3.3",
        "sectionTitle": "Combining / comparing / joining / merging",
        "title": "pandas.DataFrame.compare",
        "description": "Compare to another DataFrame and show the differences.",
        "signature": "DataFrame.compare(other, align_axis=1, keep_shape=False, keep_equal=False)",
        "signatureName": "compare",
        "returnsDescription": "DataFrame that shows the differences stacked side by side.\nThe resulting index will be a MultiIndex with \u00e2\u0080\u0098self\u00e2\u0080\u0099 and \u00e2\u0080\u0098other\u00e2\u0080\u0099\nstacked alternately at the inner level.",
        "sourceUrl": "https://github.com/pandas-dev/pandas/blob/v1.3.3/pandas/core/frame.py#L7000-L7118",
        "defaultConfig": {
          "other": "",
          "align_axis": "1",
          "keep_shape": "False",
          "keep_equal": "False"
        },
        "returns": "DataFrame"
      },
      "input_datasets": [
        {
          'type': 2,
          "id": "34a8bac5-e9ed-4c7d-ae5b-8a8f9c4ffbaa"
        },
        {
          'type': 2,
          "id": "34a8bac5-e9ed-4c7d-ae5b-8a8f9c4ffbaa"
        }
      ]
    },
    {
      "operation": {
        "operationId": "804aadc7-4f9e-41cc-8ccc-e386459fbc63",
        "operationName": "concat",
        "operationFullName": "OpIdPdDoubleConcat",
        "inputTypes": [
          2,
          2
        ],
        "outputType": 2,
        "outputTypes": [
          2
        ],
        "framework": "pandas",
        "frameworkVersion": "1.3.3",
        "sectionTitle": "Custom Operations",
        "title": "OpIdPdDoubleConcat",
        "description": "Concatenate two dataframes",
        "signature": null,
        "signatureName": null,
        "returnsDescription": null,
        "sourceUrl": null,
        "defaultConfig": {
          "axis": "0",
          "join": "outer",
          "ignore_index": "false"
        },
        "returns": "DataFrame"
      },
      "input_datasets": [
        {
          'type': 2,
          "id": "b454dbc7-15c9-4d57-944c-2931ca050b83"
        },
        {
          'type': 2,
          "id": "b454dbc7-15c9-4d57-944c-2931ca050b83"
        }
      ]
    },
    {
      "operation": {
        "operationId": "a5918ebc-5ba2-461a-8b5f-4215328d957e",
        "operationName": "classifier_random_forest",
        "operationFullName": "sklearn.classifiers.random.forest",
        "inputTypes": [
          2,
          1
        ],
        "outputType": 5,
        "outputTypes": [
          5
        ],
        "framework": "scikit-learn",
        "frameworkVersion": "1.0.2",
        "sectionTitle": "SciKit Learn",
        "title": "sklearn.classifiers.random.forest",
        "description": "Creates and fits a Random Forest Classification model",
        "signature": null,
        "signatureName": null,
        "returnsDescription": null,
        "sourceUrl": null,
        "defaultConfig": {
          "n_estimators": "100",
          "criterion": "gini",
          "max_depth": null,
          "min_samples_split": "2",
          "min_samples_leaf": "1",
          "min_weight_fraction_leaf": "0.0",
          "max_features": "auto",
          "max_leaf_nodes": null,
          "min_impurity_decrease": "0.0",
          "bootstrap": "true",
          "oob_score": "false",
          "n_jobs": null,
          "random_state": null,
          "verbose": "0",
          "warm_start": "false",
          "class_weight": null,
          "ccp_alpha": "0.0",
          "max_samples": null
        },
        "returns": "RandomForest"
      },
      "input_datasets": [
        {
          "type": 2,
          "id": "b454dbc7-15c9-4d57-944c-2931ca050b83"
        },
        {
          "type": 1,
          "id": "20040a23-95df-4906-8933-e5ab98fa1cc8"
        }
      ]
    },
    {
      "operation": {
        "operationId": "0b60e908-fae2-4d33-aa81-5d1fdc706c12",
        "operationName": "plot",
        "operationFullName": "PlotDataframe",
        "inputTypes": [
          2
        ],
        "outputType": 3,
        "outputTypes": [
          3
        ],
        "framework": "pandas",
        "frameworkVersion": "1.3.3",
        "sectionTitle": "Plotting",
        "title": "PlotDataframe",
        "description": "Plot a dataframe using matplotlib",
        "signature": null,
        "signatureName": null,
        "returnsDescription": null,
        "sourceUrl": null,
        "defaultConfig": {
          "x": "None",
          "y": "None",
          "kind": "line",
          "ax": "None",
          "subplots": "false",
          "sharex": "false",
          "sharey": "false",
          "layout": "None",
          "use_index": "true",
          "title": "None",
          "grid": "None",
          "legend": "true"
        },
        "returns": "StaticPlot"
      },
      "input_datasets": [
        {
          "type": 2,
          "id": "34a8bac5-e9ed-4c7d-ae5b-8a8f9c4ffbaa"
        }
      ]
    }
  ],
  "pipeline_id": "63fe90c6-6402-42cc-9802-6f5ba67f721e",
  "started_at": 1652383937,
  "task_id": 31,
  "dataset_id": 31,
  "task_type_id": "TaskType.SUPERVISED_CLASSIFICATION",
  "batch_number": 0,
  "completed_at": 1652384137
}
