@startuml pipeline-execution

'Name Definitions'
!$pc = "Pipeline Controller"
!$ps = "Pipeline Service"
!$es = "Execution Service"
!$hs = "Hangfire Service"
!$mb = "Message Broker"
!$bw = "Block Worker"
!$ds = "Dataset Storage"

title ** Pipeline execution **

actor User
participant "$pc" << (C,#ADD1B2) .NET Web API >>
participant "$es" << (C,#ADD1B2) .NET Web API >>
participant "$ps" << (C,#ADD1B2) .NET Web API >>
participant "$hs" << (C,#ADD1B2) .NET Web API >>
participant "$mb" << MQTT Broker >>
collections "$bw" << Python Container >>
database "$ds" << Unspecified Web API >>

== Initialization ==

"$bw" -> "$mb" : subscribe("execute/+")

== Invocation ==

"User" -> "$pc" : GET /api/v1/Pipeline/execute/{pipelineId}

"$pc" -> "$ps": loadPipeline(pipelineId: Guid)
"$pc" <-- "$ps": pipeline: Pipeline
"$pc" -> "$es": createExecution(pipeline: Pipeline)
"$es" -> "$hs": enqueue(deployNextBlocks(executionId: Guid))
"$es" <-- "$hs"
"$pc" <-- "$es": executionId
"User" <-- "$pc" : executionId: Guid
...
== Execution ==
"$hs" -> "$es": deployNextBlocks(executionId: Guid)
"$hs" <-- "$es"
alt all previous blocks have been executed
    "$es" -> "$es" : selectNextBlocks(pipelineId: Guid, executionId: Guid)
    "$es" -> "$mb" : publish(request: BlockExecutionRequest) 
    "$es" <-- "$mb" 
    "$es" -> "$mb" : subscribe("executed/{pipelineId}/{executionId}")
    ...
    
    "$mb" --> "$bw" : newPublished(request: BlockExecutionRequest)
    "$bw" -> "$bw" : creationHash(inputDataSetIds: Guid[], operation: string, operationConfig: OperationConfig)
    "$bw" -> "$ds" : GET api/v1/datasets?creationHash={hash}
    "$bw" <-- "$ds" 
    
    alt result already exists
        "$bw" -> "$mb" : publish(response: BlockExecutionResponse)
        "$bw" <-- "$mb"
    else
        "$bw" -> "$ds" : GET api/v1/datasets?id={datasetId};{datasetId};...
        "$bw" <-- "$ds"
        
        "$bw" -> "$bw" : executeOperation(datasets: Dataset[])
           
        alt successful
            "$bw" -> "$ds" : POST api/v1/datasets/create/{datasetId} (dataset: Dataset, creationHash: Hash)
            "$bw" <-- "$ds"
            "$bw" -> "$mb" : publish(response: BlockExecutionResponse)
            "$bw" <-- "$mb"
        else error during execution
            "$bw" -> "$mb" : publish(response: BlockExecutionResponse)
            "$bw" <-- "$mb"
        end
    end
    ...
    "$mb" --> "$es" : newPublished(response: BlockExecutionResponse)
    "$es" -> "$es": storeExecutedBlocks()
    "$es" -> "$hs": enqueue(deployNextBlocks(executionId: Guid))
    "$es" <-- "$hs"
    ...
end

== Checking Status ==
    ...
"User" -> "$pc" : GET /api/v1/Pipeline/executionStatus/{pipelineId}

@enduml