version: "3.8"
services:

    # Development Frontend
    dev-frontend:
        build:
            context: ./DevFrontend
            dockerfile: ./Dockerfile
            args:
                - "NG_CONFIG=local"
        restart: unless-stopped
        ports:
            - "8080:80"
        depends_on:
            - pipeline-service

    # Pipeline Service
    pipeline-service:
        build:
            context: ./PipelineService
            dockerfile: ./Dockerfile
        depends_on:
            mysql:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
            pipeline-database:
                condition: service_started
        restart: unless-stopped
        environment:
            Logging__LogLevel__Default: Debug
            EDGE_EVENT_BUS__MQTT_HOST: edge-message-broker
            EDGE_EVENT_BUS__MQTT_PORT: 1883
            EDGE_EVENT_BUS__MQTT_CLIENT_ID: pipeline-service-1
        ports:
            - "5001:80"
        volumes:
            - ./volumes/pipeline-creation-agent:/app/Resources/PipelineCandidates
            - ./volumes/pipeline-creation-agent-archive:/app/Resources/PipelineCandidatesArchive

    # Learning Store
    learning-service:
        build:
            context: ./LearningService
            dockerfile: ./Dockerfile
        restart: unless-stopped
        ports:
            - "5006:5006"
        environment:
            AWS_REGION: eu-west-3
            AWS_DEFAULT_REGION: eu-west-3
            S3_HOST: minio
            S3_PORT: 9000
            S3_ACCESS_KEY_ID: minio
            S3_ACCESS_KEY_SECRET: OsKwEnsJz0AtiX05
            PIPELINE_SERVICE_HOST: pipeline-service
            PIPELINE_SERVICE_PORT: 80
            DATASET_SERVICE_HOST: dataset-service
            DATASET_SERVICE_PORT: 5002
            MLFLOW_TRACKING_URI: "http://mlflow-server:5005"
            MLFLOW_REGISTRY_URI: "http://mlflow-server:5005"
        depends_on:
            - minio
            - dataset-service
            - pipeline-service
            - mlflow-server

    # File Service
    file-service:
        build:
            context: ./FileService
            dockerfile: ./Dockerfile
        restart: unless-stopped
        environment:
            Logging__LogLevel__Default: Information
            S3Configuration__Host: minio
            S3Configuration__Port: 9000
            S3Configuration__AccessKey: minio
            S3Configuration__SecretKey: OsKwEnsJz0AtiX05
        ports:
            - "5004:80"
        depends_on:
            - minio

    # Operation Worker
    operation-worker:
        build:
            context: ./OperationWorker
            dockerfile: ./Dockerfile
        restart: unless-stopped
        environment:
            MESSAGE_BROKER_HOST: rabbitmq
            DATASET_HOST: dataset-service
            DATASET_PORT: 5002
            S3_HOST: minio
            S3_PORT: 9000
            S3_ACCESS_KEY_ID: minio
            S3_ACCESS_KEY_SECRET: OsKwEnsJz0AtiX05
        depends_on:
            - minio
            - rabbitmq
            - dataset-service
        deploy:
            mode: replicated
            replicas: 2
        volumes:
            - ./volumes/operation-worker/data:/var/lib/operation-worker/data

    # Pipeline Creation Agent (MCTS)
    pipeline-creation-agent-m2nb-dl:
        extends:
            file: docker-creation-agent-template.yml
            service: pipeline-creation-agent
        depends_on:
            - pipeline-service
            - learning-service
            - rabbitmq
        environment:
            REWARD_FUNCTION_TYPE: 'desc_log'
            EXPERT_POLICY_MODEL_NAME: 'model-2-complementnb'
            EXPERT_POLICY_PROBABILITY: '0.75'

    pipeline-creation-agent-m3nb-pp:
        extends:
            file: docker-creation-agent-template.yml
            service: pipeline-creation-agent
        depends_on:
            - pipeline-service
            - learning-service
            - rabbitmq
        environment:
            REWARD_FUNCTION_TYPE: 'poly_peak'
            EXPERT_POLICY_MODEL_NAME: 'model-3-complementnb'
            EXPERT_POLICY_PROBABILITY: '0.75'

    pipeline-creation-agent-m3rf-pp:
        extends:
            file: docker-creation-agent-template.yml
            service: pipeline-creation-agent
        depends_on:
            - pipeline-service
            - learning-service
            - rabbitmq
        environment:
            REWARD_FUNCTION_TYPE: 'poly_peak'
            EXPERT_POLICY_MODEL_NAME: 'model-3-randomforest'
            EXPERT_POLICY_PROBABILITY: '0.75'

    # Dataset Store
    dataset-service:
        build:
            context: ./DataSetService
            dockerfile: ./Dockerfile
        restart: unless-stopped
        ports:
            - "5002:5002"
        expose:
            - 5002
        environment:
            S3_HOST: minio
            S3_PORT: 9000
            S3_ACCESS_KEY_ID: minio
            S3_ACCESS_KEY_SECRET: OsKwEnsJz0AtiX05
        depends_on:
            - minio

    # Edge Message Broker
    edge-message-broker:
        image: eclipse-mosquitto
        restart: unless-stopped
        networks:
            - default
        ports:
            - "1884:1883"
            - "9002:9001"
        volumes:
            - ./volumes/edge-event-bus/mosquitto/config:/mosquitto/config

    # MLFlow Server
    mlflow-server:
        build: ./MLflowServer
        restart: unless-stopped
        depends_on:
            - minio
            - mysql
        ports:
            - "5005:5005"
        networks:
            - default
        environment:
            AWS_REGION: eu-west-3
            AWS_DEFAULT_REGION: eu-west-3
            AWS_ACCESS_KEY_ID: minio
            AWS_SECRET_ACCESS_KEY: OsKwEnsJz0AtiX05
            MLFLOW_S3_ENDPOINT_URL: http://minio:9000
            MYSQL_HOST: mysql
            MYSQL_PORT: 3306
            MYSQL_DATABASE: mlflowdb
            MYSQL_USER: mlflowuser
            MYSQL_PASSWORD: hdfcLhDASas3vKhy

    # MinIO
    minio:
        image: minio/minio:latest
        restart: unless-stopped
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
            interval: 30s
            timeout: 20s
            retries: 3
        environment:
            MINIO_ROOT_USER: minio
            MINIO_ROOT_PASSWORD: OsKwEnsJz0AtiX05
            MINIO_SITE_REGION: eu-west-3
            MINIO_SITE_NAME: minio-local-1
        command: server --console-address ":9001" /data1
        ports:
            - "9000:9000"
            - "9001:9001"
        volumes:
            - ./volumes/minio:/data1

    # Neo4j Pipeline Database
    pipeline-database:
        build:
            context: ./Neo4jPlugins
            dockerfile: ./Dockerfile
        restart: unless-stopped
        environment:
            - NEO4J_AUTH=neo4j/test
        ports:
            - "7474:7474" # HTTP
            - "7473:7473" # HTTPS
            - "7687:7687" # Bolt
        healthcheck:
            test: [ "CMD", "curl", "--fail", "http://localhost:7474/", "||", "exit 1" ]
            interval: 10s
            timeout: 2s
            retries: 10
        volumes:
            - ./volumes/neo4j/data:/data
            - ./volumes/neo4j/logs:/logs

    # Adminer
    adminer:
        image: adminer
        restart: unless-stopped
        depends_on:
            - mysql
        ports:
            - "8081:8080"

    # MySQL Database
    mysql:
        build:
            context: ./MySqlDatabase
            dockerfile: ./Dockerfile
        restart: unless-stopped
        ports:
            - "3306:3306"
        networks:
            - default
        environment:
            - MYSQL_ROOT_PASSWORD=aNIdBLTOIC4XuHgk66
        healthcheck:
            test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
            interval: 5s
            timeout: 25s
            retries: 10
        volumes:
            - ./volumes/mysql:/var/lib/mysql

    # RabbitMQ
    rabbitmq:
        build:
            context: ./RabbitMQ
            dockerfile: ./Dockerfile
        ports:
            - "5672:5672"
            - "15672:15672"
        healthcheck:
            test: rabbitmq-diagnostics check_port_connectivity
            interval: 1s
            timeout: 3s
            retries: 30
        volumes:
            - ./volumes/rabbitmq/data/:/var/lib/rabbitmq/
            - ./volumes/rabbitmq/log/:/var/log/rabbitmq
